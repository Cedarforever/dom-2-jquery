{"version":3,"sources":["jquery.js"],"names":["window","jquery","selectorOrArray","elements","document","querySelectorAll","Array","oldApi","addClass","className","i","length","classList","add","find","selector","arr","arr11","from","concat","end","each","fn","call","parent","arr22","node","indexOf","parentElement","push","print","console","log","children","arr33"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEAA,OAAOC,MAAP,GAAgB,UAASC,eAAT,EAAyB;AACrC,QAAIC,iBAAJ,CADqC,CACvB;AACd,QAAG,OAAOD,eAAP,KAA2B,QAA9B,EAAuC;AAAG;AACtCC,mBAAWC,SAASC,gBAAT,CAA0BH,eAA1B,CAAX;AACH,KAFD,MAEM,IAAGA,2BAA2BI,KAA9B,EAAoC;AAAG;AACzCH,mBAAWD,eAAX,CADsC,CACV;AAC/B;;AAED,WAAM,EAAI;AACNK,gBAASL,gBAAgBK,MADvB;AAENC,gBAFM,oBAEGC,SAFH,EAEa;AACf,iBAAI,IAAIC,IAAE,CAAV,EAAYA,IAAEP,SAASQ,MAAvB,EAA8BD,GAA9B,EAAkC;AAC9BP,yBAASO,CAAT,EAAYE,SAAZ,CAAsBC,GAAtB,CAA0BJ,SAA1B;AACH;AACD,mBAAO,IAAP,CAJe,CAIH;AACf,SAPK;AAQNK,YARM,gBAQDC,QARC,EAQQ;AACV,gBAAIC,MAAM,EAAV;AACA,iBAAI,IAAIN,IAAE,CAAV,EAAYA,IAAEP,SAASQ,MAAvB,EAA8BD,GAA9B,EAAkC;AAChC,oBAAIO,QAASX,MAAMY,IAAN,CAAWf,SAASO,CAAT,EAAYL,gBAAZ,CAA6BU,QAA7B,CAAX,CAAb,CADgC,CACgC;AAChEC,sBAAMA,IAAIG,MAAJ,CAAWF,KAAX,CAAN;AACD;AACDD,gBAAIT,MAAJ,GAAa,IAAb;AACA,mBAAON,OAAOe,GAAP,CAAP,CAPU,CAOU;AACvB,SAhBK;AAgBS;;AAEfI,WAlBM,iBAkBD;AACD,mBAAO,KAAKb,MAAZ;AACH,SApBK;AAsBNc,YAtBM,gBAsBDC,EAtBC,EAsBE;AAAG;AACP,iBAAI,IAAIZ,IAAE,CAAV,EAAYA,IAAEP,SAASQ,MAAvB,EAA8BD,GAA9B,EAAkC;AAC9BY,mBAAGC,IAAH,CAAQ,IAAR,EAAapB,SAASO,CAAT,CAAb,EAAyBA,CAAzB,EAD8B,CACF;AAC/B;AACD,mBAAO,IAAP,CAJI,CAIU;AACjB,SA3BK;AA6BNc,cA7BM,oBA6BE;AACJ,gBAAIC,QAAQ,EAAZ;AACA,iBAAKJ,IAAL,CAAU,UAACK,IAAD,EAAQ;AACd,oBAAGD,MAAME,OAAN,CAAcD,KAAKE,aAAnB,MAAsC,CAAC,CAA1C,EAA6C;AAAG;AAC/CH,0BAAMI,IAAN,CAAWH,KAAKE,aAAhB;AAAgC,iBAFnB,CAEoB;AACrC,aAHD,EAFI,CAKiC;AACrC,mBAAO3B,OAAOwB,KAAP,CAAP;AACH,SApCK;AAsCNK,aAtCM,mBAsCC;AACJC,oBAAQC,GAAR,CAAY7B,QAAZ,EADI,CACmB;;;AAGrB;AACJ,SA3CK;AA8CN8B,gBA9CM,sBA8CI;AACN,gBAAIC,QAAQ,EAAZ;AACA,iBAAKb,IAAL,CAAW,UAACK,IAAD,EAAQ;AAAE;AACjBQ,sBAAML,IAAN,iCAAcH,KAAKO,QAAnB,GADe,CACc;AAC/B,aAFF,EAFM,CAI2B;AAChC,mBAAOhC,OAAOiC,KAAP,CAAP;AACJ;AApDK,KAAN;AAuDH,CA/DD;AAgEG;AACA","file":"jquery.e5de3225.map","sourceRoot":"..\\src","sourcesContent":["\r\n\r\nwindow.jquery = function(selectorOrArray){\r\n    let elements  //在这声明变量elements  表示这个变量 能够在window.jquery=function(){}中 这个{}里面全局使用\r\n    if(typeof selectorOrArray === 'string'){  //if(){}else if(){}构成 重载！！！\r\n        elements = document.querySelectorAll(selectorOrArray)\r\n    }else if(selectorOrArray instanceof Array){  //判断数组和对象 用的instanceof  DOM第一篇文章也有介绍\r\n        elements = selectorOrArray  //此时这个selectorOrArray就是个数组 并且这个数组是筛选后的数组对应下面的arr\r\n    }\r\n\r\n    return{   //这里是执行jquery(selectorOrArray)后 返回的对象  (无名对象)\r\n        oldApi : selectorOrArray.oldApi,\r\n    addClass(className){\r\n        for(let i=0;i<elements.length;i++){\r\n            elements[i].classList.add(className)\r\n        }\r\n        return this // 这里需要对照一下 下面的return jquery 两者是有区别的！！\r\n    },\r\n    find(selector){\r\n        let arr = []\r\n        for(let i=0;i<elements.length;i++){\r\n          let arr11 =  Array.from(elements[i].querySelectorAll(selector)) //这里就是在筛选 得到范围更小的数组\r\n          arr = arr.concat(arr11)\r\n        }\r\n        arr.oldApi = this\r\n        return jquery(arr)  //*****重新构造一个对象 把筛选过后的数组 传入到jquery(数组) 再通过重载判断 \r\n    },             //在通过重载判断 把变量elements不同的值 再传入给不同的方法 例如此时传给find()和addClass()\r\n\r\n    end(){\r\n        return this.oldApi\r\n    },\r\n\r\n    each(fn){  //each函数的主要作用就是 遍历调用者的elements变量  而且是把elements[i]当作实际参数传给fn函数  \r\n        for(let i=0;i<elements.length;i++){\r\n            fn.call(null,elements[i],i) //null表示fn函数没有this\r\n        }\r\n        return this   //返回调用者对象\r\n    },\r\n\r\n    parent(){  \r\n        let arr22 = []\r\n        this.each((node)=>{\r\n            if(arr22.indexOf(node.parentElement) === -1 ){  // if语句加的位置想一想为什么在这，\r\n             arr22.push(node.parentElement) } //不要当sb用concat concat是连接数组 这里是数组？\r\n        })                                   //因为某node的父亲只有一个 所以这里并不是数组而是一个元素\r\n        return jquery(arr22)\r\n    },\r\n\r\n    print(){\r\n       console.log(elements)  //法一  注意这里的elements是个数组 所以打印出的是个数组\r\n\r\n       \r\n         //法二 return this.each((node)=>console.log(node))自己想的办法 因为要个结果值所以加个return！！ \r\n    },\r\n\r\n\r\n    children(){\r\n        let arr33 = []\r\n        this.each( (node)=>{ //不使用...会让数组arr33中有很多伪数组,使用...就是让伪数组展开 形如node.children[0]\r\n            arr33.push(...node.children) //node是个形参占位，实际参数是elements[i] \r\n         } )                             //某node.children会有很多儿子 所以是个伪数组  \r\n         return jquery(arr33)\r\n    },\r\n\r\n}\r\n}       \r\n   //总结此时还不够完善，因为我没考虑到内存，具体做法是我应该把这些函数方法放到jQuery.prototype身上 ,然后\r\n   //然后 构造一个对象api 使其api.__proto__ === jQuery.prototype\r\n"]}